/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package schema;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-29")
public class Localizacion implements org.apache.thrift.TBase<Localizacion, Localizacion._Fields>, java.io.Serializable, Cloneable, Comparable<Localizacion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Localizacion");

  private static final org.apache.thrift.protocol.TField NUMERO_FIELD_DESC = new org.apache.thrift.protocol.TField("numero", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CALLE_FIELD_DESC = new org.apache.thrift.protocol.TField("calle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMUNA_FIELD_DESC = new org.apache.thrift.protocol.TField("comuna", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAIS_FIELD_DESC = new org.apache.thrift.protocol.TField("pais", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LocalizacionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LocalizacionTupleSchemeFactory();

  public java.lang.String numero; // optional
  public java.lang.String calle; // required
  public java.lang.String comuna; // required
  public java.lang.String region; // required
  public java.lang.String pais; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMERO((short)1, "numero"),
    CALLE((short)2, "calle"),
    COMUNA((short)3, "comuna"),
    REGION((short)4, "region"),
    PAIS((short)5, "pais");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMERO
          return NUMERO;
        case 2: // CALLE
          return CALLE;
        case 3: // COMUNA
          return COMUNA;
        case 4: // REGION
          return REGION;
        case 5: // PAIS
          return PAIS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NUMERO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMERO, new org.apache.thrift.meta_data.FieldMetaData("numero", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLE, new org.apache.thrift.meta_data.FieldMetaData("calle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMUNA, new org.apache.thrift.meta_data.FieldMetaData("comuna", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIS, new org.apache.thrift.meta_data.FieldMetaData("pais", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Localizacion.class, metaDataMap);
  }

  public Localizacion() {
  }

  public Localizacion(
    java.lang.String calle,
    java.lang.String comuna,
    java.lang.String region,
    java.lang.String pais)
  {
    this();
    this.calle = calle;
    this.comuna = comuna;
    this.region = region;
    this.pais = pais;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Localizacion(Localizacion other) {
    if (other.isSetNumero()) {
      this.numero = other.numero;
    }
    if (other.isSetCalle()) {
      this.calle = other.calle;
    }
    if (other.isSetComuna()) {
      this.comuna = other.comuna;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetPais()) {
      this.pais = other.pais;
    }
  }

  public Localizacion deepCopy() {
    return new Localizacion(this);
  }

  @Override
  public void clear() {
    this.numero = null;
    this.calle = null;
    this.comuna = null;
    this.region = null;
    this.pais = null;
  }

  public java.lang.String getNumero() {
    return this.numero;
  }

  public Localizacion setNumero(java.lang.String numero) {
    this.numero = numero;
    return this;
  }

  public void unsetNumero() {
    this.numero = null;
  }

  /** Returns true if field numero is set (has been assigned a value) and false otherwise */
  public boolean isSetNumero() {
    return this.numero != null;
  }

  public void setNumeroIsSet(boolean value) {
    if (!value) {
      this.numero = null;
    }
  }

  public java.lang.String getCalle() {
    return this.calle;
  }

  public Localizacion setCalle(java.lang.String calle) {
    this.calle = calle;
    return this;
  }

  public void unsetCalle() {
    this.calle = null;
  }

  /** Returns true if field calle is set (has been assigned a value) and false otherwise */
  public boolean isSetCalle() {
    return this.calle != null;
  }

  public void setCalleIsSet(boolean value) {
    if (!value) {
      this.calle = null;
    }
  }

  public java.lang.String getComuna() {
    return this.comuna;
  }

  public Localizacion setComuna(java.lang.String comuna) {
    this.comuna = comuna;
    return this;
  }

  public void unsetComuna() {
    this.comuna = null;
  }

  /** Returns true if field comuna is set (has been assigned a value) and false otherwise */
  public boolean isSetComuna() {
    return this.comuna != null;
  }

  public void setComunaIsSet(boolean value) {
    if (!value) {
      this.comuna = null;
    }
  }

  public java.lang.String getRegion() {
    return this.region;
  }

  public Localizacion setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public java.lang.String getPais() {
    return this.pais;
  }

  public Localizacion setPais(java.lang.String pais) {
    this.pais = pais;
    return this;
  }

  public void unsetPais() {
    this.pais = null;
  }

  /** Returns true if field pais is set (has been assigned a value) and false otherwise */
  public boolean isSetPais() {
    return this.pais != null;
  }

  public void setPaisIsSet(boolean value) {
    if (!value) {
      this.pais = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NUMERO:
      if (value == null) {
        unsetNumero();
      } else {
        setNumero((java.lang.String)value);
      }
      break;

    case CALLE:
      if (value == null) {
        unsetCalle();
      } else {
        setCalle((java.lang.String)value);
      }
      break;

    case COMUNA:
      if (value == null) {
        unsetComuna();
      } else {
        setComuna((java.lang.String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case PAIS:
      if (value == null) {
        unsetPais();
      } else {
        setPais((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMERO:
      return getNumero();

    case CALLE:
      return getCalle();

    case COMUNA:
      return getComuna();

    case REGION:
      return getRegion();

    case PAIS:
      return getPais();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUMERO:
      return isSetNumero();
    case CALLE:
      return isSetCalle();
    case COMUNA:
      return isSetComuna();
    case REGION:
      return isSetRegion();
    case PAIS:
      return isSetPais();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Localizacion)
      return this.equals((Localizacion)that);
    return false;
  }

  public boolean equals(Localizacion that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_numero = true && this.isSetNumero();
    boolean that_present_numero = true && that.isSetNumero();
    if (this_present_numero || that_present_numero) {
      if (!(this_present_numero && that_present_numero))
        return false;
      if (!this.numero.equals(that.numero))
        return false;
    }

    boolean this_present_calle = true && this.isSetCalle();
    boolean that_present_calle = true && that.isSetCalle();
    if (this_present_calle || that_present_calle) {
      if (!(this_present_calle && that_present_calle))
        return false;
      if (!this.calle.equals(that.calle))
        return false;
    }

    boolean this_present_comuna = true && this.isSetComuna();
    boolean that_present_comuna = true && that.isSetComuna();
    if (this_present_comuna || that_present_comuna) {
      if (!(this_present_comuna && that_present_comuna))
        return false;
      if (!this.comuna.equals(that.comuna))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_pais = true && this.isSetPais();
    boolean that_present_pais = true && that.isSetPais();
    if (this_present_pais || that_present_pais) {
      if (!(this_present_pais && that_present_pais))
        return false;
      if (!this.pais.equals(that.pais))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNumero()) ? 131071 : 524287);
    if (isSetNumero())
      hashCode = hashCode * 8191 + numero.hashCode();

    hashCode = hashCode * 8191 + ((isSetCalle()) ? 131071 : 524287);
    if (isSetCalle())
      hashCode = hashCode * 8191 + calle.hashCode();

    hashCode = hashCode * 8191 + ((isSetComuna()) ? 131071 : 524287);
    if (isSetComuna())
      hashCode = hashCode * 8191 + comuna.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetPais()) ? 131071 : 524287);
    if (isSetPais())
      hashCode = hashCode * 8191 + pais.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Localizacion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNumero()).compareTo(other.isSetNumero());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumero()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numero, other.numero);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCalle()).compareTo(other.isSetCalle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calle, other.calle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComuna()).compareTo(other.isSetComuna());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComuna()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comuna, other.comuna);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPais()).compareTo(other.isSetPais());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPais()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pais, other.pais);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Localizacion(");
    boolean first = true;

    if (isSetNumero()) {
      sb.append("numero:");
      if (this.numero == null) {
        sb.append("null");
      } else {
        sb.append(this.numero);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("calle:");
    if (this.calle == null) {
      sb.append("null");
    } else {
      sb.append(this.calle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comuna:");
    if (this.comuna == null) {
      sb.append("null");
    } else {
      sb.append(this.comuna);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("region:");
    if (this.region == null) {
      sb.append("null");
    } else {
      sb.append(this.region);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pais:");
    if (this.pais == null) {
      sb.append("null");
    } else {
      sb.append(this.pais);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (calle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'calle' was not present! Struct: " + toString());
    }
    if (comuna == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'comuna' was not present! Struct: " + toString());
    }
    if (region == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'region' was not present! Struct: " + toString());
    }
    if (pais == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pais' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocalizacionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LocalizacionStandardScheme getScheme() {
      return new LocalizacionStandardScheme();
    }
  }

  private static class LocalizacionStandardScheme extends org.apache.thrift.scheme.StandardScheme<Localizacion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Localizacion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMERO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.numero = iprot.readString();
              struct.setNumeroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CALLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.calle = iprot.readString();
              struct.setCalleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMUNA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comuna = iprot.readString();
              struct.setComunaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pais = iprot.readString();
              struct.setPaisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Localizacion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.numero != null) {
        if (struct.isSetNumero()) {
          oprot.writeFieldBegin(NUMERO_FIELD_DESC);
          oprot.writeString(struct.numero);
          oprot.writeFieldEnd();
        }
      }
      if (struct.calle != null) {
        oprot.writeFieldBegin(CALLE_FIELD_DESC);
        oprot.writeString(struct.calle);
        oprot.writeFieldEnd();
      }
      if (struct.comuna != null) {
        oprot.writeFieldBegin(COMUNA_FIELD_DESC);
        oprot.writeString(struct.comuna);
        oprot.writeFieldEnd();
      }
      if (struct.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(struct.region);
        oprot.writeFieldEnd();
      }
      if (struct.pais != null) {
        oprot.writeFieldBegin(PAIS_FIELD_DESC);
        oprot.writeString(struct.pais);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocalizacionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LocalizacionTupleScheme getScheme() {
      return new LocalizacionTupleScheme();
    }
  }

  private static class LocalizacionTupleScheme extends org.apache.thrift.scheme.TupleScheme<Localizacion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Localizacion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.calle);
      oprot.writeString(struct.comuna);
      oprot.writeString(struct.region);
      oprot.writeString(struct.pais);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNumero()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNumero()) {
        oprot.writeString(struct.numero);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Localizacion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.calle = iprot.readString();
      struct.setCalleIsSet(true);
      struct.comuna = iprot.readString();
      struct.setComunaIsSet(true);
      struct.region = iprot.readString();
      struct.setRegionIsSet(true);
      struct.pais = iprot.readString();
      struct.setPaisIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.numero = iprot.readString();
        struct.setNumeroIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

